{
  "hash": "28621d26a351b43b62561bb44bf01767",
  "result": {
    "markdown": "---\ntitle: \"Generative art (note) collection\"\ndescription: \"Collecting fast notes on using #rstats and potentiall other things to generate visuals.\"\nauthor: \"Matt Crump\"\ndate: '2022-11-10'\ndate-modified: last-modified\nimage: 'images/Impact3.jpg'\ncategories:\n  - generative art\n  - art\nexecute:\n  echo: false\n  warning: false\n  message: false\nbibliography: [packages.bib]\n---\n\n\n\n\n::: callout-tip\n## New rating system?\n\nI stumbled across [Dan Mackinlay's wonderful notebooks and blog](https://danmackinlay.name/about.html) the other day and was inspired by his post rating system. Dan emoji stamps his posts to indicate his assessment of amount of uncertainty, usefulness, roughness, and novelty for his posts. I might give that a whirl. But, as of right now I can't figure out how to get custom emojis working for this blog, so words will have to do.\n\nExpertise: Not much \\| Usefulness: Decent \\| Audience: notes to self\n:::\n\n::: column-margin\n<iframe src=\"https://bbs.crumplab.com/@MattCrump/109313738110058251/embed\" class=\"mastodon-embed\" style=\"max-width: 100%; border: 0\" width=\"400\" allowfullscreen=\"allowfullscreen\">\n\n</iframe>\n\n\n```{=html}\n<script src=\"https://bbs.crumplab.com/embed.js\" async=\"async\"></script>\n```\n\n:::\n\n## Some goals\n\n-   [x] search around and check out a few R packages for making generative art\n\n-   [ ] Try them out here\n\n-   [ ] Mess around on my own\n\n-   [ ] Add more testing to this space over time (when I have time\n\n-   [ ] Make options to generate blog header visuals, so that I can more quickly get into writing without having to bounce out and spend too much time making headers in Adobe Express (also fun).\n\n## Generative Rrrrt\n\nI follow a lot of #rstats people, so I have some hunchs on where to start.\n\n-   [jasmines](https://jasmines.djnavarro.net)\n-   [ambient](https://ambient.data-imaginist.com)\n-   [aRtsy](https://koenderks.github.io/aRtsy/)\n-   <https://blog.djnavarro.net/posts/2021-10-19_rtistry-posts/>\n-   <https://artstats.netlify.app/#1>\n\nThat should be enough to get started, and I'll more later.\n\n## ambient\n\n[ambient](https://ambient.data-imaginist.com) makes visual noise [@R-ambient]! I am excited. I'm also trying to remember how to cite R packages in quarto.\n\nFirst example from the ambient documentation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ambient)\nsimplex <- noise_simplex(c(500, 1000), \n                         pertubation = 'normal', \n                         pertubation_amplitude = 40)\n\nplot(as.raster(normalise(simplex)))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThat's fun. The output adds a border to the image, I'd like to turn that on/off.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(imager)\nsimplex <- noise_simplex(c(1000, 500),\n                         pertubation = 'normal',\n                         pertubation_amplitude = 40)\n\nsave.image(as.cimg(simplex), file = \"images/test.jpg\")\n```\n:::\n\n\nGoing for a full width picture.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"images/test.jpg\")\n```\n\n::: {.cell-output-display}\n![](images/test.jpg){width=100%}\n:::\n:::\n\n\n## Add words on top\n\nTangent time. How to add a layer of words on top of an image. Need to be able to do this part in order to use generative art for header backgrounds.\n\n-   Ugh, tried `imager::draw_text()` but clunky, and didn't work.\n\n-   let's check out <https://swarm-lab.github.io/Rvision/>...That looks super cool, but it needs some extra libraries to run. Best come back and try it out some time for video or other fast visual processing.\n\n-   time for [magick](https://cran.r-project.org/web/packages/magick/vignettes/intro.html#Installing_magick)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magick)\nsimplex <- noise_simplex(c(500, 1000),\n                         pertubation = 'normal',\n                         pertubation_amplitude = 40) %>%\n  normalise() %>%\n  as.raster() %>%\n  magick::image_read() %>%\n  magick::image_annotate(\n    \"IT TOOK ME WAY \\n TOO LONG \\n TO ACCOMPLISH \\n THIS GOAL\",\n    font = 'Times',\n    size = 100,\n    color = \"white\"\n  )\n\nmagick::image_write(simplex,\n                    path = \"images/test_magick.jpg\",\n                    format = \"jpeg\")\nknitr::include_graphics(\"images/test_magick.jpg\")\n```\n\n::: {.cell-output-display}\n![](images/test_magick.jpg){width=100%}\n:::\n:::\n\n\n## Changing font\n\nIs easy...go for IMPACT\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimplex <- noise_simplex(c(500, 1000),\n                         pertubation = 'normal',\n                         pertubation_amplitude = 40) %>%\n  normalise() %>%\n  as.raster() %>%\n  magick::image_read() %>%\n  magick::image_annotate(\n    \"IT TOOK ME WAY \\n TOO LONG \\n TO ACCOMPLISH \\n THIS GOAL\",\n    font = 'Impact',\n    size = 100,\n    color = \"white\"\n  )\n\nmagick::image_write(simplex,\n                    path = \"images/Impact.jpg\",\n                    format = \"jpeg\")\nknitr::include_graphics(\"images/Impact.jpg\")\n```\n\n::: {.cell-output-display}\n![](images/Impact.jpg){width=100%}\n:::\n:::\n\n\n## Border around text?\n\nIs easy...go for IMPACT\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimplex <- noise_simplex(c(500, 1000),\n                         pertubation = 'normal',\n                         pertubation_amplitude = 40) %>%\n  normalise() %>%\n  as.raster() %>%\n  magick::image_read() %>%\n  magick::image_annotate(\n    \" IT TOOK ME WAY \\n TOO LONG \\n TO ACCOMPLISH \\n THIS GOAL\",\n    font = 'Impact',\n    size = 100,\n    color = \"white\",\n    strokecolor = \"pink\"\n  )\n\nmagick::image_write(simplex,\n                    path = \"images/Impact2.jpg\",\n                    format = \"jpeg\")\nknitr::include_graphics(\"images/Impact2.jpg\")\n```\n\n::: {.cell-output-display}\n![](images/Impact2.jpg){width=100%}\n:::\n:::\n\n\n## Make it lighter\n\nSquish the noise back a little bit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimplex <- noise_simplex(c(500, 1000),\n                         pertubation = 'normal',\n                         pertubation_amplitude = 40) %>%\n  normalise(to = c(.7,1)) %>%\n  as.raster() %>%\n  magick::image_read() %>%\n  magick::image_annotate(\n    \" IT TOOK ME WAY \\n TOO LONG \\n TO ACCOMPLISH \\n THIS GOAL\",\n    font = 'Impact',\n    size = 100,\n    color = \"white\",\n    strokecolor = \"pink\"\n  )\n\nmagick::image_write(simplex,\n                    path = \"images/Impact3.jpg\",\n                    format = \"jpeg\")\nknitr::include_graphics(\"images/Impact3.jpg\")\n```\n\n::: {.cell-output-display}\n![](images/Impact3.jpg){width=100%}\n:::\n:::\n\n\n## plain color background\n\nI might be into mono-color and text for blog headers. That should be simple enough now:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheader <- matrix(1,nrow=500,ncol=1000) %>%\n  as.raster() %>%\n  image_read() %>%\n  magick::image_transparent(color=\"white\") %>%\n  magick::image_background(color=\"#ffffcc\") %>%\n  magick::image_annotate(\n    \" IT TOOK ME WAY \\n TOO LONG \\n TO ACCOMPLISH \\n THIS GOAL\",\n    font = 'Impact',\n    size = 100,\n    color = \"white\",\n    strokecolor = \"pink\"\n  )\n\n\nmagick::image_write(header,\n                    path = \"images/header.jpg\",\n                    format = \"jpeg\")\n\nknitr::include_graphics(\"images/header.jpg\")\n```\n\n::: {.cell-output-display}\n![](images/header.jpg){width=100%}\n:::\n:::\n\n\n## References\n\n\n---\nnocite: |\n  @*\n---\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}