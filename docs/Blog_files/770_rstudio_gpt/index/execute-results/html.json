{
  "hash": "53d934d57dbc19b662a7f7a6be8e4305",
  "result": {
    "markdown": "---\ntitle: \"Using GPT for writing in Rstudio\"\nauthor: Matt Crump\ndate: 6-7-23\ndescription: \"I'm spending the morning writing addins for Rstudio that interface with the OpenAi API. This should make it possible to integrate GPT as a writing aid inside Rstudio.\"\n---\n\n\n## Preamble\n\nI do most of my writing inside [Rstudio](https://posit.co/products/open-source/rstudio/) using [Quarto](https://quarto.org) documents. This means most of my documents are plain text using a combo of markdown and R code chunks that I export to multiple formats like this blog.\n\nI've been curious about using LLMs as an everyday writing assistant for a while. I've occasionally used the OpenAi playground and ChatGPT to give editorial suggestions about my writing, but I found the experience of bouncing in and out of my main writing environment too clunky. \n\nThis semester [notions.so](https://notion.so) became another writing environment that I used heavily (also markdown-ish), and I tried their in-app AI writing assist for a hot second. But, they wanted $10 a month, and I didn't want to pay them.\n\nHowever, the in-app AI assist experience with notion was not clunky. Just highlight some text, right click, and then select variously useful AI editor prompts to do thinks like: line edit for clarity, expand bullet points to paragraph, convert paragraph to bullet points, generative writing, etc.\n\nAfter a bit of messing around yesterday, it became clear that it wouldn't be too hard to write addins for Rstudio to interface with the OpenAI API, and achieve some kind of in-app writing assistant situation while I'm writing in Quarto. \n\nThis post is me doing that along with laying down some breadcrumbs so my future self can remember what I did here. \n\n## What you'll need\n\n1. An OpenAI account that allows you to create a secret key to access the API service.\n\n2. R Studio with Quarto (comes with the latest version)\n\n3. I'm using the [openai](https://github.com/irudnyts/openai) R library by Iegor Rudnytskyi, which wraps the API for R and makes sending inputs and receiving outputs very easy.\n\n## Pricing\n\nI haven't crunched the numbers too much yet. You can check out the pricing model here [https://openai.com/pricing](https://openai.com/pricing).\n\nMy napkin calculator says this should be cheaper than \\$10/month on notion. Currently, the gpt-3.5-turbo model is \\$0.002 for 1,000 tokens (about 750 words). It would take 5,000 interactions that use up 1,000 tokens each to get to $10 a month. That's about 750 words times 5000, or 3,750,000 words... or, way more words than I type monthly. Plus, it's all pay as you go, and it is possible to set spending limits if you don't want to go over some amount. Bottom line, cheaper than notion and more customizable. \n\nThere are other costs to consider, such as whether or not you want to send your words to OpenAI. \n\n## Basic workflow\n\n### Setting up the API keys\n\n1. Create a secret key in openai, copy it and put it somewhere safe. Don't share it. \n2. The `openai` R library looks for an environment variable called `OPENAI_API_KEY`, which can be set a [number of ways](https://irudnyts.github.io/openai/).\n\nMy goal here is to create addins for Rstudio that I can use while I'm writing. I don't want to input an API key everytime I use the addin, and I don't want to share the API key in a public repository. There are different strategies for managing environment variables, and this is a [helpful guide by posit](https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf). \n\nMy strategy was to add a key-value pair directly to the `.Renviron` file at the user level. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# open the .Renviron file\nusethis::edit_r_environ()\n```\n:::\n\n\nThen edit the file to add the new key-value pair, and restart R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add new environment variable to above and save\nOPENAI_API_KEY=XXXXXXXXXXXXX\n```\n:::\n\n\nAfter you restart R, you can check if R recognizes the new environment variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.getenv(\"OPENAI_API_KEY\")\n```\n:::\n\n\n\n### Test the API\n\nIf everything is working it should be possible to send prompts to OpenAI and return outputs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openai)\n\ngpt <- create_completion(\n    model = \"ada\",\n    prompt = \"Explain what is larger a pumpkin or a dinosaur?\"\n)\n```\n:::\n\n\nThe result is an R list object with the output and other info like the number of tokens used.\n\n\n::: {.cell}\n\n```{.default .cell-code}\n$id\n[1] \"cmpl-7OnnSJ0QgpVF4a86qKYmSWgSvAiym\"\n\n$object\n[1] \"text_completion\"\n\n$created\n[1] 1686145646\n\n$model\n[1] \"ada\"\n\n$choices\n                                                    text index logprobs finish_reason\n1 \\n\\nAnswer: I don't know of an easy way to express it.     0       NA        length\n\n$usage\n$usage$prompt_tokens\n[1] 11\n\n$usage$completion_tokens\n[1] 16\n\n$usage$total_tokens\n[1] 27\n```\n:::\n\n\n\n## Writing addins for R Studio\n\nThe next step is to write some custom addins for RStudio. The process for writing custom addins is documented [here](https://rstudio.github.io/rstudioaddins/).RStudio addins are available from a dropdown menu, and they can be triggered by hot-key macros. \n\nMy goal here is to start by writing an adding that can take highlighted text in the Rstudio editor, send it to openai, and return an output that would do something useful like improving the writing for clarity, flow, and length.\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}